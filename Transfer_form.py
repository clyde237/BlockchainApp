# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Transfer_form.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import hashlib


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(364, 413)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("transfer.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(10, 40, 351, 261))
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(30)
        self.gridLayout.setObjectName("gridLayout")

        self.label = QtWidgets.QLabel(self.widget)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)

        self.num_p = QtWidgets.QLineEdit(self.widget)
        self.num_p.setObjectName("num_p")
        self.gridLayout.addWidget(self.num_p, 0, 1, 1, 2)
        self.payeur = self.num_p.text()

        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 2)

        self.mnt_trans = QtWidgets.QLineEdit(self.widget)
        self.mnt_trans.setObjectName("mnt_trans")
        self.gridLayout.addWidget(self.mnt_trans, 1, 2, 1, 1)
        self.montant = self.mnt_trans.text()

        self.label_3 = QtWidgets.QLabel(self.widget)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 2, 0, 1, 1)

        self.num_ben = QtWidgets.QLineEdit(self.widget)
        self.num_ben.setObjectName("num_ben")
        self.gridLayout.addWidget(self.num_ben, 2, 2, 1, 1)
        self.benef = self.num_ben.text()

        self.annuler_btn = QtWidgets.QPushButton(self.widget)
        self.annuler_btn.setObjectName("annuler_btn")
        self.gridLayout.addWidget(self.annuler_btn, 3, 0, 1, 1)

        self.valider_btn = QtWidgets.QPushButton(self.widget)
        self.valider_btn.setObjectName("valider_btn")
        self.gridLayout.addWidget(self.valider_btn, 3, 2, 1, 1)
        # self.valider_btn.clicked.connect(self.on_valid())

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 364, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Numero du payeur:"))
        self.label_2.setText(_translate("MainWindow", "Montant de la transcation:"))
        self.label_3.setText(_translate("MainWindow", "Numero du beneficiare:"))
        self.annuler_btn.setText(_translate("MainWindow", "Annuler"))
        self.valider_btn.setText(_translate("MainWindow", "Valider"))

    # in this part we add code for make blockchain with this app
    def on_valid(self):
        class BlackCoin:
            def __init__(self, previous_block_hash, transaction_list):
                self.previous_block_hash = previous_block_hash
                self.transaction_list = transaction_list

                self.block_data = f"{' - '. join(transaction_list)} - {previous_block_hash}"
                self.block_hash = hashlib.sha256(self.block_data.encode()).hexdigest()

        class Blockchain:
            def __init__(self):
                self.chain = []
                self.generate_genesis_block()

            def generate_genesis_block(self):
                self.chain.append(BlackCoin("0", ['Genesis block']))

            def create_block_fraom_transaction(self, transaction_list):
                previous_block_hash = self.last_block.block_hash
                self.chain.append(BlackCoin(previous_block_hash, transaction_list))

            def display_chain(self):
                for i in range(len(self.chain)):
                    print(f"Data {i + 1}: {self.chain[i].block_data}")
                    print(f"Hash {i + 1}: {self.chain[i].block_hash}\n")

            @property
            def last_block(self):
                return self.chain[-1]

        MyBlockchain = Blockchain()

        num_p = self.payeur
        num_b = self.benef
        mnt_trans = self.montant

        MyBlockchain.create_block_fraom_transaction([[num_p, mnt_trans, num_b]])
        MyBlockchain.display_chain()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
